[{"path":"https://swarm-lab.github.io/cec/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kamieniecki Konrad. Author. Spurek Przemyslaw. Contributor. Simon Garnier. Maintainer, contributor.","code":""},{"path":"https://swarm-lab.github.io/cec/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Konrad K (2022). CEC: Cross-Entropy Clustering. https://github.com/swarm-lab/cec, https://swarm-lab.github.io/cec/.","code":"@Manual{,   title = {CEC: Cross-Entropy Clustering},   author = {Kamieniecki Konrad},   year = {2022},   note = {https://github.com/swarm-lab/cec, https://swarm-lab.github.io/cec/}, }"},{"path":[]},{"path":"https://swarm-lab.github.io/cec/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Cross-Entropy Clustering","text":"CEC R package performs data points clustering using cross–entropy clustering (CEC) method1. method developed based information theory combines speed simplicity k-means ability use various Gaussian mixture models automatically remove unnecessary clusters.","code":""},{"path":"https://swarm-lab.github.io/cec/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Cross-Entropy Clustering","text":"CEC can installed directly CRAN follows: can also use remotes package install development version CEC follows:","code":"install.packages(\"CEC\") remotes::install_github(\"swarm-lab/cec\")"},{"path":"https://swarm-lab.github.io/cec/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Cross-Entropy Clustering","text":"core function CEC package cec function. simplest scenario, function requires two arguments: input data matrix (x) initial number cluster centers (centers). instance, identify two clusters waiting times eruptions Old Faithful geyser Yellowstone National Park, Wyoming, USA: function cec returns following important information: clusters$cluster: cluster membership data point; clusters$centers: coordinates centers cluster; clusters$covariances.model: model covariance cluster; clusters$probability: probability random data point belongs given cluster. Additional information concerning number iterations, cost (energy) function, number clusters iteration also available. can now plot results clustering process follows:","code":"library(\"CEC\") data(\"faithful\") clusters <- cec(as.matrix(faithful[, 2, drop = FALSE]), 2) clusters hist(faithful$waiting, prob = TRUE, main = \"Time between Old Faithful eruptions\",       xlab = \"Minutes\", col = \"lightgray\", border = 0, ylim = c(0, 0.05))  for (i in c(1:2)) {     curve(cec$probability[i] * dnorm(x, mean = cec$centers[i],                                       sd = sqrt(cec$covariances.model[[i]][1])),           add = T, col = i + 1, lwd = 2)   }"},{"path":"https://swarm-lab.github.io/cec/index.html","id":"cluster-initialization","dir":"","previous_headings":"","what":"Cluster initialization","title":"Cross-Entropy Clustering","text":"Like k-means, quality results produced CEC depends choice initial cluster centers. initial locations centers can chosen using centers.init parameter cec function. can set \"random\" select initial centers randomly, \"kmeans++\" select via k-means++ method. also recommended run clustering algorithm multiple times different cluster centers. can easily achieved using nstart parameter. instance, run clustering algorithm 10 times, initializing time output k-means++ algorithm. best 10 runs (.e. run lowest cost function) returned function. Note , nstart > 1, clustering process can sped-running parallel threads using threads parameter (details package manual).","code":"clusters <- cec(as.matrix(faithful[, 2, drop = FALSE]), 2, method = \"kmeans++\",      nstart = 10, threads = 4) clusters"},{"path":"https://swarm-lab.github.io/cec/index.html","id":"other-important-parameters","dir":"","previous_headings":"","what":"Other important parameters","title":"Cross-Entropy Clustering","text":"card.min represents minimal cluster size, .e. number points cluster removed analysis. can expressed number points percentage data set size. iter.max maximum allowed number iterations algorithm start. algorithm converge iter.max reached, function stop return best result far.","code":""},{"path":"https://swarm-lab.github.io/cec/index.html","id":"available-gaussian-distributions","dir":"","previous_headings":"","what":"Available Gaussian distributions","title":"Cross-Entropy Clustering","text":"One important properties CEC algorithm can combined various Gaussian models clustering process. CEC package includes six Gaussian models, can specified via parameter type. models :","code":""},{"path":"https://swarm-lab.github.io/cec/index.html","id":"general-gaussian-distributions","dir":"","previous_headings":"Available Gaussian distributions","what":"General Gaussian distributions","title":"Cross-Entropy Clustering","text":"type = \"\" general Gaussian CEC algorithm gives similar results obtained Gaussian Mixture Models. However, CEC use EM (Expectation Maximization) approach minimization simple iteration process (Hartigan method). Consequently, larger data sets can processed shorter time. CEC tendency divide data clusters shape ellipses (ellipsoids higher dimensions). instance:","code":"data(\"fourGaussians\") cec <- cec(fourGaussians, centers = 10, type = \"all\", nstart = 20) plot(cec, asp = 1)"},{"path":"https://swarm-lab.github.io/cec/index.html","id":"spherical-distributions","dir":"","previous_headings":"Available Gaussian distributions","what":"Spherical distributions","title":"Cross-Entropy Clustering","text":"type = \"spherical\" original distribution approximated spherical (radial) densities, result splitting data disk-like clusters arbitrary sizes (spheres higher dimensions).","code":"data(\"Tset\") cec <- cec(x = Tset, centers = 10, type = \"spherical\", nstart = 5) plot(cec, asp = 1)"},{"path":"https://swarm-lab.github.io/cec/index.html","id":"spherical-distributions-with-fixed-radius","dir":"","previous_headings":"Available Gaussian distributions","what":"Spherical distributions with fixed radius","title":"Cross-Entropy Clustering","text":"type = \"fixedr\" Similarly general spherical model, data set divided clusters resembling disks, radius determined param argument.","code":"data(\"Tset\") cec <- cec(x = Tset, centers = 10, type = \"fixedr\", param = 0.01, nstart = 20) plot(cec, asp = 1)"},{"path":"https://swarm-lab.github.io/cec/index.html","id":"diagonal-distributions","dir":"","previous_headings":"Available Gaussian distributions","what":"Diagonal distributions","title":"Cross-Entropy Clustering","text":"type = \"diagonal\" case, data described ellipses main semi-major axes parallel axes coordinate system.","code":"data(\"Tset\") cec <- cec(x = Tset, centers = 10, type = \"diagonal\", nstart = 5) plot(cec, asp = 1)"},{"path":"https://swarm-lab.github.io/cec/index.html","id":"fixed-covariance-distributions","dir":"","previous_headings":"Available Gaussian distributions","what":"Fixed covariance distributions","title":"Cross-Entropy Clustering","text":"type = \"covariance\" model clusters data using Gaussians fixed covariance. covariance matrix passed param argument.","code":"data(\"Tset\") cec <- cec(x = Tset, centers = 10, card.min = '10%', type = \"covariance\",       param = matrix(c(0.04,  0,                       0,     0.01), 2)) plot(cec, asp = 1)"},{"path":"https://swarm-lab.github.io/cec/index.html","id":"fixed-eigenvalues-distributions","dir":"","previous_headings":"Available Gaussian distributions","what":"Fixed eigenvalues distributions","title":"Cross-Entropy Clustering","text":"type = \"eigenvalues\" similar previous example, Gaussians fixed eigenvalues. eigenvalues passed param argument.","code":"data(\"Tset\") cec <- cec(x = Tset, centers = 10, type = \"eigenvalues\", param = c(0.01, 0.001),      nstart = 5) plot(cec, asp = 1)"},{"path":"https://swarm-lab.github.io/cec/index.html","id":"fixed-mean-distributions","dir":"","previous_headings":"Available Gaussian distributions","what":"Fixed mean distributions","title":"Cross-Entropy Clustering","text":"type = \"mean\" condition, data clustered using Gaussians fixed mean values. mean values data dimensions passed param argument.","code":"data(\"Tset\") cec <- cec(Tset, 4, \"mean\", param = c(0.48, 0.48), nstart = 5) plot(cec, asp = 1) data(\"threeGaussians\") cec <- cec(threeGaussians,4, \"mean\", param = c(0, 0), nstart = 10) plot(cec)"},{"path":"https://swarm-lab.github.io/cec/index.html","id":"mixing-gaussian-distributions","dir":"","previous_headings":"","what":"Mixing Gaussian distributions","title":"Cross-Entropy Clustering","text":"One powerful properties CEC algorithm possibility mixing Gaussian models together. precisely, mixed models can specified giving list cluster types (list corresponding parameters, needed).","code":"data(\"mixShapes\") cec <- cec(mixShapes, 7, iter.max = 3,      type = c(\"fixedr\", \"fixedr\", \"eigen\", \"eigen\",  \"eigen\", \"eigen\", \"eigen\"),       param = list(350, 350, c(9000, 8), c(9000, 8),                   c(9000, 8), c(9000, 8), c(9000, 8)),      nstart = 500, threads = 10) plot(cec, asp = 1)"},{"path":"https://swarm-lab.github.io/cec/index.html","id":"discovering-clusters-by-splitting","dir":"","previous_headings":"","what":"Discovering clusters by splitting","title":"Cross-Entropy Clustering","text":"cec function includes option discover new clusters initial clustering occurred. done recursively trying split cluster two smaller clusters lower cost function. enable splitting method, split argument must set TRUE cec function. instance:  Combined nstart parameter, whole procedure, start end (initial clustering splitting), can repeated multiple times. , case can also use multiple threads speed process (threads parameter). Note splitting method used implicitly centers argument provided.  Finally, four parameters control splitting mode: split.depth, split.tries, split.limit, split.initial.starts. description parameters default values provided package manual. can useful help algorithm produce meaningful clustering complex situations. instance, can generate data set 20 Gaussians following code: Using general Gaussian distributions model (type = '') initial centers, algorithm finds easily 20 Gaussian clusters, need provide low card.min value.  However, using spherical densities (type = 'spherical') data set lead sub-optimal results:  can help algorithm identify satisfying solution playing split.depth split.tries parameters, instance.","code":"data(\"fourGaussians\") par(mfrow = c(1,2))  # No splitting cec <- cec(fourGaussians, centers = 1, type = \"all\") plot(cec, asp = 1, main = \"No splitting\")  # With splitting cec <- cec(fourGaussians, centers = 1, type = \"all\", split = TRUE) plot(cec, asp = 1, main = \"With splitting\") data(\"mixShapes\") cec <- cec(mixShapes) plot(cec, asp = 1) twenty.gaussians <- matrix(NA, 0, 2) for (i in 0:19) {     G <- matrix(rnorm(400), 200, 2)     G[,1] <- G[,1] + i %% 5 * 8 + stats::runif(1,-1, 1)     G[,2] <- G[,2] + i %/% 5 * 8 + stats::runif(1,-1, 1)     twenty.gaussians <- rbind(twenty.gaussians, G) } cec <- cec(twenty.gaussians, card.min=\"1%\") plot(cec, asp = 1) cec <- cec(twenty.gaussians, type = \"spherical\", card.min=\"1%\") plot(cec, asp = 1) cec <- cec(twenty.gaussians, type = \"spherical\", card.min=\"1%\",      split.depth = 25, split.tries = 15) plot(cec, asp = 1)"},{"path":"https://swarm-lab.github.io/cec/reference/CEC-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-Entropy Clustering — CEC-package","title":"Cross-Entropy Clustering — CEC-package","text":"CEC divides data Gaussian type clusters. implementation  allows simultaneous use various type Gaussian mixture models,  performs reduction unnecessary clusters able discover new  groups. Based Spurek, P. Tabor, J. (2014) <doi:10.1016/j.patcog.2014.03.006>  cec.","code":""},{"path":[]},{"path":"https://swarm-lab.github.io/cec/reference/CEC-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cross-Entropy Clustering — CEC-package","text":"Konrad Kamieniecki","code":""},{"path":"https://swarm-lab.github.io/cec/reference/Tset.html","id":null,"dir":"Reference","previous_headings":"","what":"T-Shaped Clusters — Tset","title":"T-Shaped Clusters — Tset","text":"Matrix 2-dimensional points form letter T.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/Tset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"T-Shaped Clusters — Tset","text":"","code":"data(Tset) plot(Tset, cex = 0.5, pch = 19);"},{"path":"https://swarm-lab.github.io/cec/reference/cec.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-Entropy Clustering — cec","title":"Cross-Entropy Clustering — cec","text":"cec performs Cross-Entropy Clustering data matrix.   See Details explanation Cross-Entropy Clustering.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/cec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-Entropy Clustering — cec","text":"","code":"cec(   x,   centers,   type = c(\"covariance\", \"fixedr\", \"spherical\", \"diagonal\", \"eigenvalues\", \"mean\", \"all\"),   iter.max = 25,   nstart = 1,   param,   centers.init = c(\"kmeans++\", \"random\"),   card.min = \"5%\",   keep.removed = FALSE,   interactive = FALSE,   threads = 1,   split = FALSE,   split.depth = 8,   split.tries = 5,   split.limit = 100,   split.initial.starts = 1,   readline = TRUE )"},{"path":"https://swarm-lab.github.io/cec/reference/cec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-Entropy Clustering — cec","text":"x numeric matrix data. row corresponds distinct observation; column corresponds distinct variable/dimension. must contain NA values. centers Either matrix initial centers number initial  centers (k, single number cec(data, 4, ...)) vector  variable number centers (cec(data, 3:10, ...)). must  contain NA values. centers vector, length(centers) clusterings  performed start (nstart argument) total number  clusterings length(centers) * nstart. centers number vector, initial centers generated  using method depending centers.init argument. type type (types) clustering (density family). can  either single value vector length equal number centers.  Possible values : \"covariance\", \"fixedr\", \"spherical\", \"diagonal\",  \"eigenvalues\", \"\" (default). Currently, centers argument vector, single type can  used. iter.max maximum number iterations clustering algorithm. nstart number clusterings perform (different initial  centers). best clustering (lowest cost) returned.  value grater 1 valid centers argument  number vector. centers argument vector, length(centers)  clusterings performed start total number  clusterings length(centers) * nstart. split mode (split = TRUE), whole procedure (initial  clustering + split) performed nstart times, may take  time. param parameter (parameters) specific particular type clustering. types clustering require parameters. types require parameter : \"covariance\" (matrix parameter), \"fixedr\" (numeric parameter), \"eigenvalues\" (vector parameter). can vector list (one parameters matrix vector). centers.init method used automatically initialize centers. Possible values : \"kmeans++\" (default) \"random\". card.min minimal cluster cardinality. number observations cluster becomes lower card.min, cluster removed. argument can either integer number string ending percent sign (e.g. \"5%\"). keep.removed parameter TRUE, removed clusters visible results NA \"centers\" matrix (well corresponding values list covariances). interactive TRUE, result clustering plotted every iteration. threads number threads use \"auto\" use default  number threads (usually number available processing units/cores)  performing multiple starts (nstart parameter). execution single start always performed single thread, thus  nstart = 1 one thread used regardless value  parameter. split TRUE, function attempt discover new  clusters initial clustering, trying split single clusters  two check whether lowers cost function. start (nstart), initial clustering performed  splitting applied results. number starts  initial clustering splitting driven  split.initial.starts parameter. split.depth cluster subdivision depth used split mode. Usually, value lower 10 sufficient (splitting, new clusters similar sizes). data, splitting may often produce clusters split , case higher value split.depth required. split.tries number attempts made trying split cluster split mode. split.limit maximum number centers discovered split mode. split.initial.starts number 'standard' starts performed starting splitting process. readline Used interactive mode. readline TRUE, iteration, plotting wait user press <Return> instead standard 'plotting' waiting (graphics::par(ask = TRUE)).","code":""},{"path":"https://swarm-lab.github.io/cec/reference/cec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-Entropy Clustering — cec","text":"object class cec following attributes:  data, cluster, probability, centers,  cost.function, nclusters, iterations, cost,  covariances, covariances.model, time.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/cec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cross-Entropy Clustering — cec","text":"Cross-Entropy Clustering (CEC) aims partition m points  k clusters minimize cost function (energy  E clustering) switching points  clusters. presented method based Hartigan approach,  remove clusters cardinalities decreased small prefixed  level. energy function E given : $$E(Y_1,\\mathcal{F}_1;...;Y_k,\\mathcal{F}_k) = \\sum\\limits_{=1}^{k}  p(Y_i) \\cdot (-ln(p(Y_i)) + H^{\\times}(Y_i\\|\\mathcal{F}_i))$$ Yi denotes -th cluster, p(Yi) ratio  number points -th cluster total number points,  H(Yi|Fi) value cross-entropy, represents  internal cluster energy function data Yi defined respect  certain Gaussian density family Fi, encodes type  clustering consider. value internal energy function H depends  covariance matrix (computed using maximum-likelihood) mean (case  mean model) points cluster. Seven  implementations H proposed (expressed type  - model - clustering):  \"\": Gaussian densities. Data form ellipsoids   arbitrary radiuses. \"covariance\": Gaussian densities fixed given covariance.   shapes clusters depend given covariance matrix (additional   parameter). \"fixedr\": Special case 'covariance', covariance matrix   equals rI given r (additional parameter).   clustering tendency divide data balls approximate   radius proportional square root r. \"spherical\": Spherical (radial) Gaussian densities (covariance   proportional identity). Clusters tendency form balls   arbitrary sizes. \"diagonal\": Gaussian densities diagonal covariane. Data   form ellipsoids radiuses parallel coordinate axes. \"eigenvalues\": Gaussian densities covariance matrix   fixed eigenvalues (additional parameter). clustering try divide   data fixed-shaped ellipsoids rotated arbitrary angle. \"mean\": Gaussian densities fixed mean. Data covered   ellipsoids fixed centers. implementation cec function allows mixing clustering types.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/cec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cross-Entropy Clustering — cec","text":"Spurek, P. Tabor, J. (2014) Cross-Entropy Clustering  Pattern Recognition 47, 9 3046--3059","code":""},{"path":[]},{"path":"https://swarm-lab.github.io/cec/reference/cec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-Entropy Clustering — cec","text":"","code":"## Example of clustering a random data set of 3 Gaussians, with 10 random ## initial centers and a minimal cluster size of 7% of the total data set.  m1 <- matrix(rnorm(2000, sd = 1), ncol = 2) m2 <- matrix(rnorm(2000, mean = 3, sd = 1.5), ncol = 2) m3 <- matrix(rnorm(2000, mean = 3, sd = 1), ncol = 2) m3[,2] <- m3[, 2] - 5 m <- rbind(m1, m2, m3)  plot(m, cex = 0.5, pch = 19)   ## Clustering result: Z <- cec(m, 10, iter.max = 100, card.min = \"7%\") plot(Z)   # Result: Z #> CEC clustering result:  #>  #> Probability vector: #> [1] 0.325 0.149 0.356 0.170 #>  #> Means of clusters: #>            [,1]       [,2] #> [1,]  3.0380706  3.0661060 #> [2,]  0.5347287 -0.3532307 #> [3,]  2.8862293 -1.9450605 #> [4,] -0.6684517  0.4165707 #>  #> Cost function: #> [1] 4.132956 #>  #> Number of clusters: #> [1] 4 #>  #> Number of iterations: #> [1] 28 #>  #> Computation time: #> [1] 0.021 #>  #> Available components: #>  [1] \"data\"              \"cluster\"           \"probabilities\"     #>  [4] \"centers\"           \"cost.function\"     \"nclusters\"         #>  [7] \"iterations\"        \"covariances\"       \"covariances.model\" #> [10] \"time\"               ## Example of clustering mouse-like set using spherical Gaussian densities. m <- mouseset(n = 7000, r.head = 2, r.left.ear = 1.1, r.right.ear = 1.1, left.ear.dist = 2.5, right.ear.dist = 2.5, dim = 2) plot(m, cex = 0.5, pch = 19)  ## Clustering result: Z <- cec(m, 3, type = 'sp', iter.max = 100, nstart = 4, card.min = '5%') plot(Z)  # Result: Z #> CEC clustering result:  #>  #> Probability vector: #> [1] 0.1945714 0.6312857 0.1741429 #>  #> Means of clusters: #>              [,1]        [,2] #> [1,]  1.799731600  1.81832907 #> [2,] -0.003373857 -0.07127208 #> [3,] -1.801586551  1.86009435 #>  #> Cost function: #> [1] 3.243875 #>  #> Number of clusters: #> [1] 3 #>  #> Number of iterations: #> [1] 14 #>  #> Computation time: #> [1] 0.045 #>  #> Available components: #>  [1] \"data\"              \"cluster\"           \"probabilities\"     #>  [4] \"centers\"           \"cost.function\"     \"nclusters\"         #>  [7] \"iterations\"        \"covariances\"       \"covariances.model\" #> [10] \"time\"               ## Example of clustering data set 'Tset' using 'eigenvalues' clustering type. data(Tset) plot(Tset, cex = 0.5, pch = 19)  centers <- init.centers(Tset, 2) ## Clustering result: Z <- cec(Tset, 5, 'eigenvalues', param = c(0.02, 0.002), nstart = 4) plot(Z)  # Result: Z #> CEC clustering result:  #>  #> Probability vector: #> [1] 0.09355609 0.13937947 0.31360382 0.13556086 0.31789976 #>  #> Means of clusters: #>           [,1]       [,2] #> [1,] 0.4785275 0.02452337 #> [2,] 0.7643719 0.95023375 #> [3,] 0.4802300 0.77350819 #> [4,] 0.2042192 0.95055618 #> [5,] 0.4802873 0.30611503 #>  #> Cost function: #> [1] -0.965621 #>  #> Number of clusters: #> [1] 5 #>  #> Number of iterations: #> [1] 9 #>  #> Computation time: #> [1] 0.213 #>  #> Available components: #>  [1] \"data\"              \"cluster\"           \"probabilities\"     #>  [4] \"centers\"           \"cost.function\"     \"nclusters\"         #>  [7] \"iterations\"        \"covariances\"       \"covariances.model\" #> [10] \"time\"               ## Example of using cec split method starting with a single cluster. data(mixShapes) plot(mixShapes, cex = 0.5, pch = 19)  ## Clustering result: Z <- cec(mixShapes, 1, split = TRUE) plot(Z)  # Result: Z #> CEC clustering result:  #>  #> Probability vector: #> [1] 0.1427778 0.1404444 0.1435556 0.1427778 0.1453333 0.1450000 0.1401111 #>  #> Means of clusters: #>           [,1]      [,2] #> [1,] 200.07333 100.05577 #> [2,] 470.67809  30.09067 #> [3,] 485.59620 168.18558 #> [4,] 368.08445 203.08078 #> [5,]  79.96403 263.55175 #> [6,] 160.00748 310.04231 #> [7,] 205.68965 399.95641 #>  #> Cost function: #> [1] 10.14958 #>  #> Number of clusters: #> [1] 7 #>  #> Number of iterations: #> [1] 3 #>  #> Computation time: #> [1] 0.148 #>  #> Available components: #>  [1] \"data\"              \"cluster\"           \"probabilities\"     #>  [4] \"centers\"           \"cost.function\"     \"nclusters\"         #>  [7] \"iterations\"        \"covariances\"       \"covariances.model\" #> [10] \"time\""},{"path":"https://swarm-lab.github.io/cec/reference/fourGaussians.html","id":null,"dir":"Reference","previous_headings":"","what":"Four Gaussian Clusters — fourGaussians","title":"Four Gaussian Clusters — fourGaussians","text":"Matrix 2-dimensional points forming four Gaussian clusters.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/fourGaussians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Four Gaussian Clusters — fourGaussians","text":"","code":"data(fourGaussians) plot(fourGaussians, cex = 0.5, pch = 19);"},{"path":"https://swarm-lab.github.io/cec/reference/init.centers.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster Center Initialization — init.centers","title":"Cluster Center Initialization — init.centers","text":"init.centers automatically initializes centers  clusters running Cross-Entropy Clustering algorithm.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/init.centers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster Center Initialization — init.centers","text":"","code":"init.centers(x, k, method = c(\"kmeans++\", \"random\"))"},{"path":"https://swarm-lab.github.io/cec/reference/init.centers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster Center Initialization — init.centers","text":"x numeric matrix data. row corresponds distinct observation; column corresponds distinct variable/dimension. must contain NA values. k integer indicating number cluster centers initialize. method character string indicating initialization method use.  can take following values: \"kmeans++\": centers selected using k-means++ algorithm. \"random\": centers randomly selected among values   x","code":""},{"path":"https://swarm-lab.github.io/cec/reference/init.centers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster Center Initialization — init.centers","text":"matrix k rows ncol(x) columns.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/init.centers.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cluster Center Initialization — init.centers","text":"Arthur, D., & Vassilvitskii, S. (2007). k-means++: advantages   careful seeding. Proceedings Eighteenth Annual ACM-SIAM Symposium   Discrete Algorithms, 1027–1035.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/init.centers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster Center Initialization — init.centers","text":"","code":"## See the examples provided with the cec() function."},{"path":"https://swarm-lab.github.io/cec/reference/mixShapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixed Shapes Clusters — mixShapes","title":"Mixed Shapes Clusters — mixShapes","text":"Matrix 2-dimensional points form circular elliptical   patterns.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/mixShapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixed Shapes Clusters — mixShapes","text":"","code":"data(mixShapes) plot(mixShapes, cex = 0.5, pch = 19);"},{"path":"https://swarm-lab.github.io/cec/reference/mouseset.html","id":null,"dir":"Reference","previous_headings":"","what":"Mouse — mouseset","title":"Mouse — mouseset","text":"mouseset generates cluster points uniformly   distributed inside \"mouse head\" shape.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/mouseset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mouse — mouseset","text":"","code":"mouseset(   n = 4000,   r.head = 2,   r.left.ear = 1.1,   r.right.ear = 1.1,   left.ear.dist = 2.5,   right.ear.dist = 2.5,   dim = 2 )"},{"path":"https://swarm-lab.github.io/cec/reference/mouseset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mouse — mouseset","text":"n number points (default: 4000). r.head radius mouse's head (default: 2). r.left.ear, r.right.ear radii left right ear  mouse's head (default: 1.1). left.ear.dist, right.ear.dist distance center  mouse's head center left right ear (default: 2.5). dim dimensionality mouse's head (default: 2).","code":""},{"path":"https://swarm-lab.github.io/cec/reference/mouseset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mouse — mouseset","text":"matrix n rows dim columns.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/mouseset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mouse — mouseset","text":"","code":"plot(mouseset())"},{"path":"https://swarm-lab.github.io/cec/reference/plot.cec.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot CEC Objects — plot.cec","title":"Plot CEC Objects — plot.cec","text":"plot.cec presents results cec  function form plot. colors data points represent  cluster belong . Ellipses drawn represent covariance  (either model sample) cluster.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/plot.cec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot CEC Objects — plot.cec","text":"","code":"# S3 method for cec plot(   x,   col,   cex = 0.5,   pch = 19,   cex.centers = 1,   pch.centers = 8,   ellipses = TRUE,   ellipses.lwd = 4,   ellipses.lty = 2,   model = TRUE,   xlab,   ylab,   ... )"},{"path":"https://swarm-lab.github.io/cec/reference/plot.cec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot CEC Objects — plot.cec","text":"x cec object resulting cec function. col specification default plotting color points  clusters. See par details. cex numerical value giving amount plotting text  symbols magnified relative default. See par  details. pch Either integer specifying symbol single character  used default plotting points. See par  details. cex.centers cex, except applies  centers' means. pch.centers pch, except applies  centers' means. ellipses parameter TRUE, covariance ellipses drawn. ellipses.lwd line width covariance ellipses. See lwd par details. ellipses.lty line type covariance ellipses. See lty par details. model parameter TRUE, model (expected) covariance used cluster instead sample covariance (MLE)  points cluster, drawing covariance ellipses. xlab label x axis. See plot details. ylab label y axis. See plot details. ... Additional arguments passed plot drawing data  points.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/plot.cec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot CEC Objects — plot.cec","text":"function returns nothing.","code":""},{"path":[]},{"path":"https://swarm-lab.github.io/cec/reference/plot.cec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot CEC Objects — plot.cec","text":"","code":"## See the examples provided with the cec() function."},{"path":"https://swarm-lab.github.io/cec/reference/print.cec.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing Cross Entropy Clusters — print.cec","title":"Printing Cross Entropy Clusters — print.cec","text":"Print objects class cec.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/print.cec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing Cross Entropy Clusters — print.cec","text":"","code":"# S3 method for cec print(x, ...)"},{"path":"https://swarm-lab.github.io/cec/reference/print.cec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing Cross Entropy Clusters — print.cec","text":"x object produced cec. ... Ignored.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/print.cec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Printing Cross Entropy Clusters — print.cec","text":"function returns nothing.","code":""},{"path":[]},{"path":"https://swarm-lab.github.io/cec/reference/print.cec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing Cross Entropy Clusters — print.cec","text":"","code":"## See the examples provided with the cec() function."},{"path":"https://swarm-lab.github.io/cec/reference/threeGaussians.html","id":null,"dir":"Reference","previous_headings":"","what":"Three Gaussian Clusters — threeGaussians","title":"Three Gaussian Clusters — threeGaussians","text":"Matrix 2-dimensional points forming three Gaussian clusters.","code":""},{"path":"https://swarm-lab.github.io/cec/reference/threeGaussians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Three Gaussian Clusters — threeGaussians","text":"","code":"data(threeGaussians) plot(threeGaussians, cex = 0.5, pch = 19);"},{"path":[]},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"new-features-0-11-0","dir":"Changelog","previous_headings":"","what":"New features","title":"CEC v0.11.0","text":"New maintainer. New logo.","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"minor-improvements-and-fixes-0-11-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"CEC v0.11.0","text":"Refactoring/reorganizing R code easier maintenance. Improving documentation. Moving GitHub actions CI instead Travis.","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"cec-v0103","dir":"Changelog","previous_headings":"","what":"CEC v0.10.3","title":"CEC v0.10.3","text":"CRAN release: 2021-09-21","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"new-features-0-10-3","dir":"Changelog","previous_headings":"","what":"New features","title":"CEC v0.10.3","text":"N/.","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"minor-improvements-and-fixes-0-10-3","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"CEC v0.10.3","text":"Fixing gcc-11 issues. Fixing CRAN issues.","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"cec-v0102","dir":"Changelog","previous_headings":"","what":"CEC v0.10.2","title":"CEC v0.10.2","text":"CRAN release: 2018-07-26","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"new-features-0-10-2","dir":"Changelog","previous_headings":"","what":"New features","title":"CEC v0.10.2","text":"Adding fixed mean model. Adding data set: threeGaussians.","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"minor-improvements-and-fixes-0-10-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"CEC v0.10.2","text":"Fixing compilation issues platforms.","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"cec-v0101","dir":"Changelog","previous_headings":"","what":"CEC v0.10.1","title":"CEC v0.10.1","text":"CRAN release: 2018-07-09","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"new-features-0-10-1","dir":"Changelog","previous_headings":"","what":"New features","title":"CEC v0.10.1","text":"Rewriting C code C++11. Adding split method. Adding threads.","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"minor-improvements-and-fixes-0-10-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"CEC v0.10.1","text":"N/.","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"cec-v094","dir":"Changelog","previous_headings":"","what":"CEC v0.9.4","title":"CEC v0.9.4","text":"CRAN release: 2016-04-24","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"new-features-0-9-4","dir":"Changelog","previous_headings":"","what":"New features","title":"CEC v0.9.4","text":"N/.","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"minor-improvements-and-fixes-0-9-4","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"CEC v0.9.4","text":"Adding README.md. Lots refactoring. Small fixes.","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"cec-v093","dir":"Changelog","previous_headings":"","what":"CEC v0.9.3","title":"CEC v0.9.3","text":"CRAN release: 2015-02-03","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"new-features-0-9-3","dir":"Changelog","previous_headings":"","what":"New features","title":"CEC v0.9.3","text":"Changing way initial centers vector handled: start, length(centers) clusterings performed. Adding two datasets: fourGaussians mixShapes.","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"minor-improvements-and-fixes-0-9-3","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"CEC v0.9.3","text":"Giving support -1 iterations (fixing memcheck problems).","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"cec-v092","dir":"Changelog","previous_headings":"","what":"CEC v0.9.2","title":"CEC v0.9.2","text":"CRAN release: 2014-11-15","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"new-features-0-9-2","dir":"Changelog","previous_headings":"","what":"New features","title":"CEC v0.9.2","text":"N/","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"minor-improvements-and-fixes-0-9-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"CEC v0.9.2","text":"Checking input data NA values (session crushing). Changing ‘ZERO_EPSILON’ ‘1.0e-32’. Lots refactoring.","code":""},{"path":"https://swarm-lab.github.io/cec/news/index.html","id":"cec-v091","dir":"Changelog","previous_headings":"","what":"CEC v0.9.1","title":"CEC v0.9.1","text":"CRAN release: 2014-10-09 Initial Release.","code":""}]
